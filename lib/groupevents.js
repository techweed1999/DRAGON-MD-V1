//Give Me Credit If Using This File Give Me Credit On Your Channel ‚úÖ 
// Credits DavidTechInc - DRAGON-MDüß°

const { isJidGroup } = require('@whiskeysockets/baileys');
const config = require('../config');

const getContextInfo = (m) => {
    return {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
            newsletterJid: '120363400129137847@newsletter',
            newsletterName: 'WEED TECH',
            serverMessageId: 143,
        },
    };
};

const ppUrls = [
    'https://files.catbox.moe/wbpqf9.jpg',
];

const GroupEvents = async (conn, update) => {
    try {
        const isGroup = isJidGroup(update.id);
        if (!isGroup) return;

        const metadata = await conn.groupMetadata(update.id);
        const participants = update.participants;
        const desc = metadata.desc || "No Description";
        const groupMembersCount = metadata.participants.length;

        let ppUrl;
        try {
            ppUrl = await conn.profilePictureUrl(update.id, 'image');
        } catch {
            ppUrl = ppUrls[Math.floor(Math.random() * ppUrls.length)];
        }

        for (const num of participants) {
            const userName = num.split("@")[0];
            const timestamp = new Date().toLocaleString();

            if (update.action === "add" && config.WELCOME === "true") {
                const WelcomeText = ` ú…™ ·¥Ö·¥á·¥Ä Ä @${userName} üëã\n` +
                    `·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥èü§π‚Äç‚ôÄÔ∏è *${metadata.subject}*.\n` +
                    ` è·¥è·¥ú ·¥Ä Ä·¥á ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ${groupMembersCount} …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò. ü§∏‚Äç‚ôÄÔ∏è\n` +
                    `·¥õ…™·¥ç·¥á üìÜ: *${timestamp}*\n` +
                    `·¥á…¥·¥ä·¥è è ·¥Ä…¥·¥Ö  Ä·¥á·¥Ä·¥Ö ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥èüîñ:\n` +
                    `${desc}\n` +
                    `*·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Weed*.`;

                await conn.sendMessage(update.id, {
                    image: { url: ppUrl },
                    caption: WelcomeText,
                    mentions: [num],
                    contextInfo: getContextInfo({ sender: num }),
                });

            } else if (update.action === "remove" && config.WELCOME === "true") {
                const GoodbyeText = ` ú·¥ú ú·¥°! @${userName}.  ü·¥á“ì·¥õ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥òüò∂\n` +
                    `·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò …¥·¥è·¥°  ú·¥Äs ${groupMembersCount} ·¥ç·¥á·¥ç ô·¥á Äs.\n` +
                    `·¥õ…™·¥ç·¥á  ü·¥á“ì·¥õ: *${timestamp}*\n` +
                    `·¥ò ü·¥á·¥Äs·¥á s ú·¥Ä Ä·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò  ü…™…¥·¥ã “ì·¥è Ä …¥·¥á·¥° ·¥ç·¥á·¥ç ô·¥á Ä(s)`;

                await conn.sendMessage(update.id, {
                    image: { url: ppUrl },
                    caption: GoodbyeText,
                    mentions: [num],
                    contextInfo: getContextInfo({ sender: num }),
                });

            } else if (update.action === "demote" && config.ADMIN_EVENTS === "true") {
                const demoter = update.author.split("@")[0];
                await conn.sendMessage(update.id, {
                    text: `*Admin Event*\n\n` +
                          `@${demoter} has demoted @${userName} from admin. üëÄ\n` +
                          `Time: ${timestamp}\n` +
                          `*Group:* ${metadata.subject}`,
                    mentions: [update.author, num],
                    contextInfo: getContextInfo({ sender: update.author }),
                });

            } else if (update.action === "promote" && config.ADMIN_EVENTS === "true") {
                const promoter = update.author.split("@")[0];
                await conn.sendMessage(update.id, {
                    text: `*Admin Event*\n\n` +
                          `@${promoter} has promoted @${userName} to admin. üéâ\n` +
                          `Time: ${timestamp}\n` +
                          `*Group:* ${metadata.subject}`,
                    mentions: [update.author, num],
                    contextInfo: getContextInfo({ sender: update.author }),
                });
            }
        }
    } catch (err) {
        console.error('Group event error:', err);
    }
};

module.exports = GroupEvents;
